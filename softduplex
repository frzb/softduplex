#!/usr/bin/sh
set -e

# Copyright (C) 2021 Gunter Miegel <gunter.miegel@rgsqd.de>
#
# This file is part of Softduplex.
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

INPUT_DIR_EVEN_PAGES=/input/even
INPUT_DIR_ODD_PAGES=/input/odd
OUTPUT_TEMP_DIR=$(mktemp -d)
OUTPUT_DIR_MERGED_PAGES=/output

echo "Softduplex has started and is watching the directories:"
echo "$INPUT_DIR_EVEN_PAGES"
echo "$INPUT_DIR_ODD_PAGES"

# Depending on the implementation the creation of a PDF document file is often not an atomic operation.
# At first an empty file is created in the file system.
# Which is then filled with actual file content.
# We have to cope with this by waiting until the file is identified as proper PDF
# document.
# For that we watch at end of the file with tail  and inspect the header with the file command.
wait_for_pdf_file() {
  path=$1

  #while ! tail -1 $path | grep '%%EOF'; do
  #  sleep 1
  #done
  
  while ! file $path | grep 'PDF document'; do
    sleep 1
  done
}

while true; do

  if ls $INPUT_DIR_EVEN_PAGES/* 2>/dev/null; then
    INPUT_FILE_EVEN_PAGES=$(readlink -f "$INPUT_DIR_EVEN_PAGES"/* | head -1)
  else
    [ "$VERBOSE" = true ] && echo "$INPUT_DIR_EVEN_PAGES is still empty"
  fi

  if ls $INPUT_DIR_ODD_PAGES/* 2>/dev/null; then
    INPUT_FILE_ODD_PAGES=$(readlink -f $INPUT_DIR_ODD_PAGES/* | head -1)
  else
    [ "$VERBOSE" = true ] && echo "$INPUT_DIR_ODD_PAGES is still empty"
  fi

  # We have to write the output file at first to a temporary directory else
  # other processes which want to access the newly created PDF file will get confused when they
  # want to access the file which is still written.
  if [ -n "$INPUT_FILE_EVEN_PAGES" ] && [ -n "$INPUT_FILE_ODD_PAGES" ]; then
    OUTPUT_FILE_MERGED=$OUTPUT_TEMP_DIR/$(basename $INPUT_FILE_ODD_PAGES .pdf)_merged.pdf

    wait_for_pdf_file $INPUT_FILE_ODD_PAGES
    wait_for_pdf_file $INPUT_FILE_EVEN_PAGES

    if [ "$REVERSE" = true ]; then
      pdftk A=$INPUT_FILE_ODD_PAGES B=$INPUT_FILE_EVEN_PAGES shuffle A Bend-1 output $OUTPUT_FILE_MERGED
    else
      pdftk A=$INPUT_FILE_ODD_PAGES B=$INPUT_FILE_EVEN_PAGES shuffle A B output $OUTPUT_FILE_MERGED
    fi
    echo "Created merged PDF: $OUTPUT_FILE_MERGED"
    rm -v $INPUT_FILE_ODD_PAGES $INPUT_FILE_EVEN_PAGES \
      && mv -v $OUTPUT_FILE_MERGED $OUTPUT_DIR_MERGED_PAGES
    unset INPUT_FILE_ODD_PAGES INPUT_FILE_EVEN_PAGES
  fi
  sleep 2
done

rm -rf $OUTPUT_TEMP_DIR
